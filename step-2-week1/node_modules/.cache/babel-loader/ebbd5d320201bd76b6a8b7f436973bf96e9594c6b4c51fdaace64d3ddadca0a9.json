{"ast":null,"code":"import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nimport { login } from \"../../services/user\";\nimport Home from \"../../pages/HomePage\";\nconst initialState = {\n  email: null,\n  // isLoggedIn : false,\n  loading: false,\n  // 요청을 보냈을 때는 true, 아닌 경우: 요청이 없었거나, 실패했거나, 성공했을 때 false\n  // expirationTime : null,\n  token: null\n};\nconst userSlice = createSlice({\n  name: \"user\",\n  initialState,\n  reducers: {\n    setEmail: (state, action) => {\n      state.email = action.payload.email;\n    }\n\n    // setUser: (state, action) => {\n    //   state.email = action.payload.email;\n    //   state.expirationTime = action.payload.expirationTime;\n    //   state.isLoggedIn = true;\n    //   // window.location.href = \"/\";\n    // },\n    // clearUser: (state) => {\n    //   state.email = null;\n    //   state.expirationTime = null;\n    //   state.isLoggedIn = false;\n    // },\n  },\n\n  extraReducers: builder => {\n    builder.addCase(loginRequest.pending, (state, action) => {\n      state.loading = true;\n    });\n    builder.addCase(loginRequest.fulfilled, (state, action) => {\n      state.loading = false;\n      state.email = action.payload.email;\n      localStorage.setItem('token', action.payload.token);\n      state.token = action.payload.token;\n    });\n    builder.addCase(loginRequest.rejected, (state, action) => {\n      state.loading = false;\n      state.error = action.payload.error.message;\n    });\n  }\n});\nexport const loginRequest = createAsyncThunk('user/loginRequest', async data => {\n  const {\n    email,\n    password\n  } = data;\n  const response = await login({\n    email,\n    password\n  });\n  return {\n    email,\n    token: response.headers.getAuthorization()\n  };\n});\nexport const {\n  setUser,\n  clearUser\n} = userSlice.actions;\nexport default userSlice.reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","login","Home","initialState","email","loading","token","userSlice","name","reducers","setEmail","state","action","payload","extraReducers","builder","addCase","loginRequest","pending","fulfilled","localStorage","setItem","rejected","error","message","data","password","response","headers","getAuthorization","setUser","clearUser","actions","reducer"],"sources":["/Users/somingyeong/Documents/kakao/step2-FE-kakao-shop/step-2-week1/src/store/slices/userSlice.js"],"sourcesContent":["import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nimport { login } from \"../../services/user\"\nimport Home from \"../../pages/HomePage\";\n\nconst initialState = {\n  email: null,\n  // isLoggedIn : false,\n  loading: false,  // 요청을 보냈을 때는 true, 아닌 경우: 요청이 없었거나, 실패했거나, 성공했을 때 false\n  // expirationTime : null,\n  token: null,\n};\n\nconst userSlice = createSlice({\n  name: \"user\",\n  initialState,\n\n  reducers: {\n    setEmail: (state, action) => {\n      state.email = action.payload.email;\n    },\n\n    // setUser: (state, action) => {\n    //   state.email = action.payload.email;\n    //   state.expirationTime = action.payload.expirationTime;\n    //   state.isLoggedIn = true;\n    //   // window.location.href = \"/\";\n    // },\n    // clearUser: (state) => {\n    //   state.email = null;\n    //   state.expirationTime = null;\n    //   state.isLoggedIn = false;\n    // },\n\n  },\n    extraReducers: (builder) => {\n      builder.addCase(loginRequest.pending, (state, action) => {\n        state.loading = true;\n      });\n      builder.addCase(loginRequest.fulfilled, (state, action) => {\n        state.loading = false;\n        state.email = action.payload.email;\n        localStorage.setItem('token', action.payload.token);\n        state.token = action.payload.token;\n      });\n      builder.addCase(loginRequest.rejected, (state, action) => {\n        state.loading = false;\n        state.error = action.payload.error.message;\n      });\n\n    },\n});\n\nexport const loginRequest = createAsyncThunk(\n  'user/loginRequest',\n  async (data) => {\n    const { email, password } = data;\n    const response = await login({ email, password });\n    return {\n      email,\n      token: response.headers.getAuthorization(),\n    };\n  }\n);\n\nexport const {  setUser, clearUser } = userSlice.actions;\n\nexport default userSlice.reducer;"],"mappings":"AAAA,SAASA,WAAW,EAAEC,gBAAgB,QAAQ,kBAAkB;AAChE,SAASC,KAAK,QAAQ,qBAAqB;AAC3C,OAAOC,IAAI,MAAM,sBAAsB;AAEvC,MAAMC,YAAY,GAAG;EACnBC,KAAK,EAAE,IAAI;EACX;EACAC,OAAO,EAAE,KAAK;EAAG;EACjB;EACAC,KAAK,EAAE;AACT,CAAC;AAED,MAAMC,SAAS,GAAGR,WAAW,CAAC;EAC5BS,IAAI,EAAE,MAAM;EACZL,YAAY;EAEZM,QAAQ,EAAE;IACRC,QAAQ,EAAEA,CAACC,KAAK,EAAEC,MAAM,KAAK;MAC3BD,KAAK,CAACP,KAAK,GAAGQ,MAAM,CAACC,OAAO,CAACT,KAAK;IACpC;;IAEA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;EAEF,CAAC;;EACCU,aAAa,EAAGC,OAAO,IAAK;IAC1BA,OAAO,CAACC,OAAO,CAACC,YAAY,CAACC,OAAO,EAAE,CAACP,KAAK,EAAEC,MAAM,KAAK;MACvDD,KAAK,CAACN,OAAO,GAAG,IAAI;IACtB,CAAC,CAAC;IACFU,OAAO,CAACC,OAAO,CAACC,YAAY,CAACE,SAAS,EAAE,CAACR,KAAK,EAAEC,MAAM,KAAK;MACzDD,KAAK,CAACN,OAAO,GAAG,KAAK;MACrBM,KAAK,CAACP,KAAK,GAAGQ,MAAM,CAACC,OAAO,CAACT,KAAK;MAClCgB,YAAY,CAACC,OAAO,CAAC,OAAO,EAAET,MAAM,CAACC,OAAO,CAACP,KAAK,CAAC;MACnDK,KAAK,CAACL,KAAK,GAAGM,MAAM,CAACC,OAAO,CAACP,KAAK;IACpC,CAAC,CAAC;IACFS,OAAO,CAACC,OAAO,CAACC,YAAY,CAACK,QAAQ,EAAE,CAACX,KAAK,EAAEC,MAAM,KAAK;MACxDD,KAAK,CAACN,OAAO,GAAG,KAAK;MACrBM,KAAK,CAACY,KAAK,GAAGX,MAAM,CAACC,OAAO,CAACU,KAAK,CAACC,OAAO;IAC5C,CAAC,CAAC;EAEJ;AACJ,CAAC,CAAC;AAEF,OAAO,MAAMP,YAAY,GAAGjB,gBAAgB,CAC1C,mBAAmB,EACnB,MAAOyB,IAAI,IAAK;EACd,MAAM;IAAErB,KAAK;IAAEsB;EAAS,CAAC,GAAGD,IAAI;EAChC,MAAME,QAAQ,GAAG,MAAM1B,KAAK,CAAC;IAAEG,KAAK;IAAEsB;EAAS,CAAC,CAAC;EACjD,OAAO;IACLtB,KAAK;IACLE,KAAK,EAAEqB,QAAQ,CAACC,OAAO,CAACC,gBAAgB,CAAC;EAC3C,CAAC;AACH,CACF,CAAC;AAED,OAAO,MAAM;EAAGC,OAAO;EAAEC;AAAU,CAAC,GAAGxB,SAAS,CAACyB,OAAO;AAExD,eAAezB,SAAS,CAAC0B,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}