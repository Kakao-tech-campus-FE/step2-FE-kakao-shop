{"ast":null,"code":"import axios from 'axios';\nconst instance = axios.create({\n  baseURL: process.env.REACT_APP_API_URL,\n  timeout: 1000,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// token이 있으면 request header에 token을 실어 보낸다.\ninstance.interceptors.request.use(config => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers['Authorization'] = `${token}`;\n  }\n  return config;\n});\n\n// 응답 받은 token을 localStorage에 저장한다.\n// 모든 미들웨어는 use()를 사용하여 등록한다.\ninstance.interceptors.response.use(response => {\n  return response;\n}, error => {\n  if (error && error.response) {\n    switch (error.response.status) {\n      case 400:\n        error.message = '잘못된 요청입니다.';\n        break;\n      case 401:\n        error.message = '로그인이 필요합니다.';\n        break;\n      case 403:\n        error.message = '권한이 없습니다.';\n        break;\n      case 404:\n        error.message = '데이터를 찾을 수 없습니다.';\n        break;\n      case 500:\n        error.message = '서버에러입니다.';\n        break;\n      default:\n        error.message = `알 수 없는 에러가 발생했습니다. ${error.response.status}`;\n    }\n  }\n  return Promise.reject(error);\n});\nexport const register = data => {\n  const {\n    email,\n    password,\n    username\n  } = data;\n  instance.post('/users', data).then(res => {\n    console.log(res);\n  });\n};\nexport const login = data => {\n  const {\n    email,\n    password\n  } = data;\n  instance.post('/users/login', data).then(res => {\n    console.log(res);\n  });\n};","map":{"version":3,"names":["axios","instance","create","baseURL","process","env","REACT_APP_API_URL","timeout","headers","interceptors","request","use","config","token","localStorage","getItem","response","error","status","message","Promise","reject","register","data","email","password","username","post","then","res","console","log","login"],"sources":["/Users/minmunui/Desktop/Study/TechCampus/step2-FE-kakao-shop/src/services/api.js"],"sourcesContent":["import axios from 'axios';\n\nconst instance = axios.create({\n    baseURL: process.env.REACT_APP_API_URL,\n    timeout: 1000,\n    headers: {\n        'Content-Type': 'application/json',\n\n    }\n});\n\n// token이 있으면 request header에 token을 실어 보낸다.\ninstance.interceptors.request.use(\n    config => {\n        const token = localStorage.getItem('token');\n        if (token) {\n            config.headers['Authorization'] = `${token}`;\n        }\n        return config;\n    }\n);\n\n// 응답 받은 token을 localStorage에 저장한다.\n// 모든 미들웨어는 use()를 사용하여 등록한다.\ninstance.interceptors.response.use(\n    (response) => {\n        return response;\n    },\n    (error) => {\n        if (error && error.response) {\n            switch (error.response.status) {\n                case 400:\n                    error.message = '잘못된 요청입니다.';\n                    break;\n                case 401:\n                    error.message = '로그인이 필요합니다.';\n                    break;\n                case 403:\n                    error.message = '권한이 없습니다.';\n                    break;\n                case 404:\n                    error.message = '데이터를 찾을 수 없습니다.';\n                    break;\n                case 500:\n                    error.message = '서버에러입니다.';\n                    break;\n                default:\n                    error.message = `알 수 없는 에러가 발생했습니다. ${error.response.status}`;\n            }\n        }\n        return Promise.reject(error);\n    }\n)\n\nexport const register = (data) => {\n    const {email, password, username} = data;\n    instance.post('/users', data)\n        .then(res => {\n            console.log(res)\n        }\n    )\n}\n\nexport const login = (data) => {\n    const {email, password} = data;\n    instance.post('/users/login', data)\n        .then(res => {\n            console.log(res)\n        }\n    )\n}"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,QAAQ,GAAGD,KAAK,CAACE,MAAM,CAAC;EAC1BC,OAAO,EAAEC,OAAO,CAACC,GAAG,CAACC,iBAAiB;EACtCC,OAAO,EAAE,IAAI;EACbC,OAAO,EAAE;IACL,cAAc,EAAE;EAEpB;AACJ,CAAC,CAAC;;AAEF;AACAP,QAAQ,CAACQ,YAAY,CAACC,OAAO,CAACC,GAAG,CAC7BC,MAAM,IAAI;EACN,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EAC3C,IAAIF,KAAK,EAAE;IACPD,MAAM,CAACJ,OAAO,CAAC,eAAe,CAAC,GAAI,GAAEK,KAAM,EAAC;EAChD;EACA,OAAOD,MAAM;AACjB,CACJ,CAAC;;AAED;AACA;AACAX,QAAQ,CAACQ,YAAY,CAACO,QAAQ,CAACL,GAAG,CAC7BK,QAAQ,IAAK;EACV,OAAOA,QAAQ;AACnB,CAAC,EACAC,KAAK,IAAK;EACP,IAAIA,KAAK,IAAIA,KAAK,CAACD,QAAQ,EAAE;IACzB,QAAQC,KAAK,CAACD,QAAQ,CAACE,MAAM;MACzB,KAAK,GAAG;QACJD,KAAK,CAACE,OAAO,GAAG,YAAY;QAC5B;MACJ,KAAK,GAAG;QACJF,KAAK,CAACE,OAAO,GAAG,aAAa;QAC7B;MACJ,KAAK,GAAG;QACJF,KAAK,CAACE,OAAO,GAAG,WAAW;QAC3B;MACJ,KAAK,GAAG;QACJF,KAAK,CAACE,OAAO,GAAG,iBAAiB;QACjC;MACJ,KAAK,GAAG;QACJF,KAAK,CAACE,OAAO,GAAG,UAAU;QAC1B;MACJ;QACIF,KAAK,CAACE,OAAO,GAAI,sBAAqBF,KAAK,CAACD,QAAQ,CAACE,MAAO,EAAC;IACrE;EACJ;EACA,OAAOE,OAAO,CAACC,MAAM,CAACJ,KAAK,CAAC;AAChC,CACJ,CAAC;AAED,OAAO,MAAMK,QAAQ,GAAIC,IAAI,IAAK;EAC9B,MAAM;IAACC,KAAK;IAAEC,QAAQ;IAAEC;EAAQ,CAAC,GAAGH,IAAI;EACxCtB,QAAQ,CAAC0B,IAAI,CAAC,QAAQ,EAAEJ,IAAI,CAAC,CACxBK,IAAI,CAACC,GAAG,IAAI;IACTC,OAAO,CAACC,GAAG,CAACF,GAAG,CAAC;EACpB,CACJ,CAAC;AACL,CAAC;AAED,OAAO,MAAMG,KAAK,GAAIT,IAAI,IAAK;EAC3B,MAAM;IAACC,KAAK;IAAEC;EAAQ,CAAC,GAAGF,IAAI;EAC9BtB,QAAQ,CAAC0B,IAAI,CAAC,cAAc,EAAEJ,IAAI,CAAC,CAC9BK,IAAI,CAACC,GAAG,IAAI;IACTC,OAAO,CAACC,GAAG,CAACF,GAAG,CAAC;EACpB,CACJ,CAAC;AACL,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}